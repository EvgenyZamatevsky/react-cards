{"version":3,"file":"static/js/Learn.6dea9181.chunk.js","mappings":"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","sources":["webpack://react-cards/./src/pages/learn/Learn.module.scss?51d7","pages/learn/Learn.tsx","store/selectors/cards.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"nextQuestionBtn\":\"Learn_nextQuestionBtn__uvUH5\",\"container\":\"Learn_container__G4wJb\",\"content\":\"Learn_content__sxuOl\",\"body\":\"Learn_body__Iumir\",\"showAnswerBtn\":\"Learn_showAnswerBtn__rc8u0\",\"title\":\"Learn_title__RrS5a\",\"shots\":\"Learn_shots__xNoV-\",\"questionContainer\":\"Learn_questionContainer__QOoOz\",\"answerContainer\":\"Learn_answerContainer__NcsnN\",\"question\":\"Learn_question__qx2xJ\",\"answer\":\"Learn_answer__w5E3N\",\"text\":\"Learn_text__ut8sM\"};","import React, { FC, useEffect, useState } from 'react'\r\nimport { CardType } from 'api/cards/types'\r\nimport { BackToPage, UniversalButton } from 'components'\r\nimport { Path } from 'enums'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Navigate, useNavigate, useParams } from 'react-router-dom'\r\nimport { getCards, updateCardGrade } from 'store/asyncActions/cards'\r\nimport { Nullable, ReturnComponentType } from 'types'\r\nimport { CurrentCardType } from './types'\r\nimport { UniversalRadio } from 'components/common/universalRadio'\r\nimport style from './Learn.module.scss'\r\nimport {\r\n\tselectCardPage,\r\n\tselectCardPageCount,\r\n\tselectCards,\r\n\tselectIsAuth,\r\n\tselectIsDisabled,\r\n\tselectSearchCardValue,\r\n\tselectSortCards\r\n} from 'store/selectors'\r\n\r\nconst grades: string[] = ['Did not know', 'Forgot', 'A lot of thought', 'Ð¡onfused', 'Knew the answer']\r\n\r\nexport const Learn: FC = (): ReturnComponentType => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst { packId } = useParams()\r\n\tconst navigate = useNavigate()\r\n\r\n\tconst cards = useSelector(selectCards)\r\n\tconst searchCardValue = useSelector(selectSearchCardValue)\r\n\tconst sortCards = useSelector(selectSortCards)\r\n\tconst cardPage = useSelector(selectCardPage)\r\n\tconst cardPageCount = useSelector(selectCardPageCount)\r\n\tconst isAuth = useSelector(selectIsAuth)\r\n\tconst isDisabled = useSelector(selectIsDisabled)\r\n\r\n\tconst [isShowAnswer, setIsShowAnswer] = useState(false)\r\n\tconst [isMounted, setIsMounted] = useState(true)\r\n\tconst [gradeIndex, setGradeIndex] = useState(1)\r\n\tconst [currentGrade, setCurrentGrade] = useState(grades[0])\r\n\tconst [currentCard, setCurrentCard] = useState<Nullable<CurrentCardType>>(null)\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isMounted) {\r\n\t\t\tdispatch(getCards({\r\n\t\t\t\tpackId: packId as string,\r\n\t\t\t\tcardQuestion: searchCardValue,\r\n\t\t\t\tsortCards,\r\n\t\t\t\tpage: cardPage,\r\n\t\t\t\tpageCount: cardPageCount\r\n\t\t\t}) as any)\r\n\t\t\tsetIsMounted(false)\r\n\t\t}\r\n\r\n\t\tif (cards.length > 0) {\r\n\t\t\tsetCurrentCard(getCard(cards))\r\n\t\t}\r\n\t}, [packId, cards, isMounted])\r\n\r\n\tconst getCard = (cards: CardType[]) => {\r\n\t\tconst sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0)\r\n\t\tconst rand = Math.random() * sum\r\n\t\tconst res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n\t\t\tconst newSum = acc.sum + (6 - card.grade) * (6 - card.grade)\r\n\t\t\treturn { sum: newSum, id: newSum < rand ? i : acc.id }\r\n\t\t}, { sum: 0, id: -1 })\r\n\r\n\t\treturn cards[res.id + 1]\r\n\t}\r\n\r\n\tconst onNextQuestionClick = (): void => {\r\n\t\tsetGradeIndex(1)\r\n\t\tsetCurrentGrade(grades[0])\r\n\t\tsetIsShowAnswer(false)\r\n\r\n\t\tif (cards.length > 0) {\r\n\t\t\tdispatch(updateCardGrade({ updatedGrade: gradeIndex, cardId: currentCard!?._id }) as any)\r\n\t\t\tsetCurrentCard(getCard(cards))\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleBackPacksListClick = (): void => {\r\n\t\tnavigate(Path.PACKS)\r\n\t}\r\n\r\n\tconst onShowAnswerActiveClick = (): void => setIsShowAnswer(true)\r\n\r\n\tconst handleSetGradeIndexChange = (index: number): void => {\r\n\t\tsetGradeIndex(index + 1)\r\n\t}\r\n\r\n\tif (!isAuth) {\r\n\t\treturn <Navigate to={Path.LOGIN} />\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={style.container}>\r\n\t\t\t<BackToPage\r\n\t\t\t\tisDisabled={isDisabled}\r\n\t\t\t\ttitle={'Back to Packs List'}\r\n\t\t\t\tonBackToPageClick={handleBackPacksListClick}\r\n\t\t\t/>\r\n\r\n\t\t\t<div className={style.content}>\r\n\t\t\t\t<h2 className={style.title}>Learn</h2>\r\n\r\n\t\t\t\t<div className={style.body}>\r\n\t\t\t\t\t<div className={style.shots}>\r\n\t\t\t\t\t\tNumber of attempts to answer a question:\r\n\t\t\t\t\t\t<span> {currentCard?.shots}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={style.questionContainer}>\r\n\t\t\t\t\t\t<span>Question:</span>\r\n\t\t\t\t\t\t<div className={style.question}>{currentCard?.question}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{!isShowAnswer &&\r\n\t\t\t\t\t\t<UniversalButton\r\n\t\t\t\t\t\t\tclassName={style.showAnswerBtn}\r\n\t\t\t\t\t\t\tonClick={onShowAnswerActiveClick}\r\n\t\t\t\t\t\t\tdisabled={isDisabled}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tShow answer\r\n\t\t\t\t\t\t</UniversalButton>}\r\n\r\n\t\t\t\t\t{isShowAnswer &&\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<div className={style.answerContainer}>\r\n\t\t\t\t\t\t\t\t<span>Answer:</span>\r\n\t\t\t\t\t\t\t\t<div className={style.answer}>{currentCard?.answer}</div>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div className={style.text}>Rate yourself:</div>\r\n\r\n\t\t\t\t\t\t\t<UniversalRadio\r\n\t\t\t\t\t\t\t\tprimary\r\n\t\t\t\t\t\t\t\toptions={grades}\r\n\t\t\t\t\t\t\t\tname='radio'\r\n\t\t\t\t\t\t\t\tvalue={currentGrade}\r\n\t\t\t\t\t\t\t\tsetValue={setCurrentGrade}\r\n\t\t\t\t\t\t\t\tsetIndex={handleSetGradeIndexChange}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<UniversalButton\r\n\t\t\t\t\t\t\t\tclassName={style.nextQuestionBtn}\r\n\t\t\t\t\t\t\t\tonClick={onNextQuestionClick}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tNext question\r\n\t\t\t\t\t\t\t</UniversalButton>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import { CardType } from 'api/cards/types'\r\nimport { RootStateType } from 'store'\r\n\r\nexport const selectCards = (state: RootStateType): CardType[] => state.cards.cards\r\n\r\nexport const selectSearchCardValue = (state: RootStateType): string => state.cards.searchCardValue\r\n\r\nexport const selectSortCards = (state: RootStateType): string => state.cards.sortCards\r\n\r\nexport const selectCardPage = (state: RootStateType): number => state.cards.page\r\n\r\nexport const selectCardPageCount = (state: RootStateType): number => state.cards.pageCount\r\n\r\nexport const selectCardsTotalCount = (state: RootStateType): number => state.cards.cardsTotalCount\r\n\r\nexport const selectPackUserId = (state: RootStateType): string => state.cards.packUserId\r\n"],"names":["grades","Learn","dispatch","useDispatch","packId","useParams","navigate","useNavigate","cards","useSelector","selectCards","searchCardValue","selectSearchCardValue","sortCards","selectSortCards","cardPage","selectCardPage","cardPageCount","selectCardPageCount","isAuth","selectIsAuth","isDisabled","selectIsDisabled","useState","isShowAnswer","setIsShowAnswer","isMounted","setIsMounted","gradeIndex","setGradeIndex","currentGrade","setCurrentGrade","currentCard","setCurrentCard","useEffect","getCards","cardQuestion","page","pageCount","length","getCard","sum","reduce","acc","card","grade","rand","Math","random","res","i","newSum","id","className","style","title","onBackToPageClick","Path","shots","question","onClick","disabled","answer","primary","options","name","value","setValue","setIndex","index","updateCardGrade","updatedGrade","cardId","_id","to","state","selectCardsTotalCount","cardsTotalCount","selectPackUserId","packUserId"],"sourceRoot":""}