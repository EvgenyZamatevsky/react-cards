{"version":3,"file":"static/js/Cards.3c1a1277.chunk.js","mappings":"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","sources":["webpack://react-cards/./src/pages/cards/Cards.module.scss?249a","pages/cards/Cards.tsx","store/selectors/cards.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Cards_container__uItu4\",\"content\":\"Cards_content__kRfAz\",\"addNewCardBtn\":\"Cards_addNewCardBtn__dxxlS\",\"title\":\"Cards_title__A-NdW\",\"sort\":\"Cards_sort__BX8eB\",\"emptyItems\":\"Cards_emptyItems__mpOwK\"};","import React, { FC, useCallback, useEffect, useRef, useState } from 'react'\r\nimport { BackToPage, Card, Modal, ModalCard, Pagination, Search, Sort, UniversalButton } from 'components'\r\nimport { Path } from 'enums'\r\nimport { useSelector } from 'react-redux'\r\nimport { Navigate, useNavigate, useParams } from 'react-router-dom'\r\nimport { addCard, getCards } from 'store/asyncActions/cards'\r\nimport { ReturnComponentType } from 'types'\r\nimport { setCardPage, setCardPageCount, setSearchCardValue, setSortCards } from 'store/slices'\r\nimport { EMPTY_STRING, ERROR_MESSAGE } from 'constants/base'\r\nimport { useAppDispatch } from 'hooks'\r\nimport style from './Cards.module.scss'\r\nimport {\r\n\tselectAuthorizedUserId,\r\n\tselectCardPage,\r\n\tselectCardPageCount,\r\n\tselectCards,\r\n\tselectCardsTotalCount,\r\n\tselectIsAuth,\r\n\tselectIsDisabled,\r\n\tselectIsLoading,\r\n\tselectPackUserId,\r\n\tselectSearchCardValue,\r\n\tselectSortCards\r\n} from 'store/selectors'\r\n\r\nexport const Cards: FC = (): ReturnComponentType => {\r\n\r\n\tconst dispatch = useAppDispatch()\r\n\r\n\tconst { packId } = useParams()\r\n\tconst navigate = useNavigate()\r\n\r\n\tconst isAuth = useSelector(selectIsAuth)\r\n\tconst isLoading = useSelector(selectIsLoading)\r\n\tconst cards = useSelector(selectCards)\r\n\tconst searchCardValue = useSelector(selectSearchCardValue)\r\n\tconst sortCards = useSelector(selectSortCards)\r\n\tconst cardPage = useSelector(selectCardPage)\r\n\tconst cardPageCount = useSelector(selectCardPageCount)\r\n\tconst isDisabled = useSelector(selectIsDisabled)\r\n\tconst cardsTotalCount = useSelector(selectCardsTotalCount)\r\n\tconst authorizedUserId = useSelector(selectAuthorizedUserId)\r\n\tconst packUserId = useSelector(selectPackUserId)\r\n\r\n\tconst [isActiveModal, setIsActiveModal] = useState(false)\r\n\tconst [questionValue, setQuestionValue] = useState(EMPTY_STRING)\r\n\tconst [answerValue, setAnswerValue] = useState(EMPTY_STRING)\r\n\tconst [questionErrorMessage, setQuestionErrorMessage] = useState(EMPTY_STRING)\r\n\tconst [answerErrorMessage, setAnswerErrorMessage] = useState(EMPTY_STRING)\r\n\r\n\tconst questionInputRef = useRef<HTMLInputElement>(null)\r\n\tconst isMounted = useRef(false)\r\n\r\n\tconst sortCardsValues: string[] = ['Question', 'Answer', 'Last Updated', 'Grade']\r\n\tconst sortCardsByDescending: string[] = ['0question', '0answer', '0updated', '1grade']\r\n\tconst sortCardsByAscending: string[] = ['1question', '1answer', '1updated', '0grade']\r\n\tconst isOwner = authorizedUserId === packUserId\r\n\r\n\tconst cardsRender = cards.map(({ _id, question, answer, updated, grade }) => {\r\n\t\treturn (\r\n\t\t\t<Card\r\n\t\t\t\tkey={_id}\r\n\t\t\t\tcardId={_id}\r\n\t\t\t\tquestion={question}\r\n\t\t\t\tanswer={answer}\r\n\t\t\t\tupdated={updated}\r\n\t\t\t\tgrade={grade}\r\n\t\t\t\tpackId={packId!}\r\n\t\t\t\tisOwner={isOwner}\r\n\t\t\t/>\r\n\t\t)\r\n\t})\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isAuth) {\r\n\t\t\tdispatch(getCards(\r\n\t\t\t\t{\r\n\t\t\t\t\tpackId: packId as string,\r\n\t\t\t\t\tcardQuestion: searchCardValue,\r\n\t\t\t\t\tsortCards,\r\n\t\t\t\t\tpage: cardPage,\r\n\t\t\t\t\tpageCount: cardPageCount\r\n\t\t\t\t}))\r\n\t\t}\r\n\t}, [searchCardValue, sortCards, cardPage, cardPageCount])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isMounted.current) {\r\n\t\t\twindow.scrollTo(0, 0)\r\n\t\t}\r\n\r\n\t\tisMounted.current = true\r\n\t}, [cardPage, cardPageCount])\r\n\r\n\tconst handleSetSearchCardValueChange = useCallback((value: string): void => {\r\n\t\tdispatch(setSearchCardValue(value))\r\n\t}, [])\r\n\r\n\tconst handleResetSearchCardValueClick = useCallback((resetValue: string): void => {\r\n\t\tdispatch(setSearchCardValue(resetValue))\r\n\t}, [])\r\n\r\n\tconst handleSortCardsByDescendingClick = (value: string): void => {\r\n\t\tdispatch(setSortCards(value))\r\n\t}\r\n\r\n\tconst handleSortCardsByAscendingClick = (value: string): void => {\r\n\t\tdispatch(setSortCards(value))\r\n\t}\r\n\r\n\tconst resetModalValues = (): void => {\r\n\t\tsetIsActiveModal(false)\r\n\t\tsetQuestionValue(EMPTY_STRING)\r\n\t\tsetAnswerValue(EMPTY_STRING)\r\n\t\tsetQuestionErrorMessage(EMPTY_STRING)\r\n\t\tsetAnswerErrorMessage(EMPTY_STRING)\r\n\t}\r\n\r\n\tconst onAddPackClick = (): void => {\r\n\t\tconst answerValueTrimmed = answerValue.trim()\r\n\t\tconst questionValueTrimmed = questionValue.trim()\r\n\r\n\t\tif (answerValueTrimmed !== EMPTY_STRING && questionValueTrimmed !== EMPTY_STRING) {\r\n\t\t\tdispatch(addCard({ packId: packId as string, answer: answerValue, question: questionValue }))\r\n\t\t\tresetModalValues()\r\n\t\t} else {\r\n\t\t\tif (answerValueTrimmed === EMPTY_STRING) {\r\n\t\t\t\tsetAnswerErrorMessage(ERROR_MESSAGE)\r\n\t\t\t}\r\n\t\t\tif (questionValueTrimmed === EMPTY_STRING) {\r\n\t\t\t\tsetQuestionErrorMessage(ERROR_MESSAGE)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleBackPacksListClick = (): void => {\r\n\t\tnavigate(Path.PACKS)\r\n\t}\r\n\r\n\tconst handleSetPageClick = useCallback((page: number): void => {\r\n\t\tdispatch(setCardPage(page))\r\n\t}, [])\r\n\r\n\tconst handleSetPageCountChange = useCallback((pageCount: number): void => {\r\n\t\tdispatch(setCardPageCount(pageCount))\r\n\t}, [])\r\n\r\n\tconst handleDeactivateModalClick = (): void => resetModalValues()\r\n\r\n\tconst handleActivateModalClick = (): void => {\r\n\t\tsetIsActiveModal(true)\r\n\t\tquestionInputRef.current?.focus()\r\n\t}\r\n\r\n\tif (!isAuth) {\r\n\t\treturn <Navigate to={Path.LOGIN} />\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Modal\r\n\t\t\t\tisModalActive={isActiveModal}\r\n\t\t\t\tonDeactivateModalClick={handleDeactivateModalClick}\r\n\t\t\t>\r\n\t\t\t\t<ModalCard\r\n\t\t\t\t\tonDeactivateModalClick={handleDeactivateModalClick}\r\n\t\t\t\t\tonSaveClick={onAddPackClick}\r\n\t\t\t\t\ttitle={'Add new card'}\r\n\t\t\t\t\tsetAnswerValue={setAnswerValue}\r\n\t\t\t\t\tsetQuestionValue={setQuestionValue}\r\n\t\t\t\t\tanswer={answerValue}\r\n\t\t\t\t\tquestion={questionValue}\r\n\t\t\t\t\tref={questionInputRef}\r\n\t\t\t\t\tquestionErrorMessage={questionErrorMessage}\r\n\t\t\t\t\tanswerErrorMessage={answerErrorMessage}\r\n\t\t\t\t\tsetQuestionErrorMessage={setQuestionErrorMessage}\r\n\t\t\t\t\tsetAnswerErrorMessage={setAnswerErrorMessage}\r\n\t\t\t\t/>\r\n\t\t\t</Modal>\r\n\t\t\t<div className={style.container}>\r\n\t\t\t\t<BackToPage\r\n\t\t\t\t\tisDisabled={isDisabled}\r\n\t\t\t\t\ttitle={'Back to Packs List'}\r\n\t\t\t\t\tonBackToPageClick={handleBackPacksListClick}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<h2 className={style.title}>Cards</h2>\r\n\t\t\t\t<div className={style.content}>\r\n\t\t\t\t\t<Search\r\n\t\t\t\t\t\tsearchValue={searchCardValue}\r\n\t\t\t\t\t\tisDisabled={isDisabled}\r\n\t\t\t\t\t\thandleSetSearchValueChange={handleSetSearchCardValueChange}\r\n\t\t\t\t\t\thandleResetSearchValueClick={handleResetSearchCardValueClick}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{isOwner &&\r\n\t\t\t\t\t\t<UniversalButton\r\n\t\t\t\t\t\t\tclassName={style.addNewCardBtn}\r\n\t\t\t\t\t\t\tonClick={handleActivateModalClick}\r\n\t\t\t\t\t\t\tdisabled={isDisabled}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tAdd new card\r\n\t\t\t\t\t\t</UniversalButton>}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={style.sort}>\r\n\t\t\t\t\t<Sort\r\n\t\t\t\t\t\tsortValues={sortCardsValues}\r\n\t\t\t\t\t\tsortByDescending={sortCardsByDescending}\r\n\t\t\t\t\t\tsortByAscending={sortCardsByAscending}\r\n\t\t\t\t\t\tsortValue={sortCards}\r\n\t\t\t\t\t\tisDisabled={isDisabled}\r\n\t\t\t\t\t\thandleSortByDescendingClick={handleSortCardsByDescendingClick}\r\n\t\t\t\t\t\thandleSortByAscendingClick={handleSortCardsByAscendingClick}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t{cards.length\r\n\t\t\t\t\t? cardsRender\r\n\t\t\t\t\t: !isLoading && <h2 className={style.emptyItems}>There are no cards in this pack</h2>}\r\n\t\t\t\t<Pagination\r\n\t\t\t\t\tpageCount={cardPageCount}\r\n\t\t\t\t\tpage={cardPage}\r\n\t\t\t\t\ttotalItemsCount={cardsTotalCount}\r\n\t\t\t\t\thandleSetPageClick={handleSetPageClick}\r\n\t\t\t\t\thandleSetPageCountChange={handleSetPageCountChange}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n","import { CardType } from 'api/cards/types'\r\nimport { RootStateType } from 'store'\r\n\r\nexport const selectCards = (state: RootStateType): CardType[] => state.cards.cards\r\n\r\nexport const selectSearchCardValue = (state: RootStateType): string => state.cards.searchCardValue\r\n\r\nexport const selectSortCards = (state: RootStateType): string => state.cards.sortCards\r\n\r\nexport const selectCardPage = (state: RootStateType): number => state.cards.page\r\n\r\nexport const selectCardPageCount = (state: RootStateType): number => state.cards.pageCount\r\n\r\nexport const selectCardsTotalCount = (state: RootStateType): number => state.cards.cardsTotalCount\r\n\r\nexport const selectPackUserId = (state: RootStateType): string => state.cards.packUserId\r\n"],"names":["Cards","dispatch","useAppDispatch","packId","useParams","navigate","useNavigate","isAuth","useSelector","selectIsAuth","isLoading","selectIsLoading","cards","selectCards","searchCardValue","selectSearchCardValue","sortCards","selectSortCards","cardPage","selectCardPage","cardPageCount","selectCardPageCount","isDisabled","selectIsDisabled","cardsTotalCount","selectCardsTotalCount","authorizedUserId","selectAuthorizedUserId","packUserId","selectPackUserId","useState","isActiveModal","setIsActiveModal","EMPTY_STRING","questionValue","setQuestionValue","answerValue","setAnswerValue","questionErrorMessage","setQuestionErrorMessage","answerErrorMessage","setAnswerErrorMessage","questionInputRef","useRef","isMounted","isOwner","cardsRender","map","_id","question","answer","updated","grade","cardId","useEffect","getCards","cardQuestion","page","pageCount","current","window","scrollTo","handleSetSearchCardValueChange","useCallback","value","setSearchCardValue","handleResetSearchCardValueClick","resetValue","resetModalValues","handleSetPageClick","setCardPage","handleSetPageCountChange","setCardPageCount","handleDeactivateModalClick","isModalActive","onDeactivateModalClick","onSaveClick","answerValueTrimmed","trim","questionValueTrimmed","addCard","ERROR_MESSAGE","title","ref","className","style","onBackToPageClick","Path","searchValue","handleSetSearchValueChange","handleResetSearchValueClick","onClick","focus","disabled","sortValues","sortByDescending","sortByAscending","sortValue","handleSortByDescendingClick","setSortCards","handleSortByAscendingClick","length","totalItemsCount","to","state"],"sourceRoot":""}