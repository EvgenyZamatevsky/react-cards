{"version":3,"file":"static/js/Cards.58737794.chunk.js","mappings":"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","sources":["store/selectors/cards.ts","webpack://react-cards/./src/pages/cards/Cards.module.scss?249a","pages/cards/Cards.tsx"],"sourcesContent":["import { CardType } from 'api/cards/types'\r\nimport { RootStateType } from 'store'\r\n\r\nexport const selectCards = (state: RootStateType): CardType[] => state.cards.cards\r\n\r\nexport const selectSearchCardValue = (state: RootStateType): string => state.cards.searchCardValue\r\n\r\nexport const selectSortCards = (state: RootStateType): string => state.cards.sortCards\r\n\r\nexport const selectCardPage = (state: RootStateType): number => state.cards.page\r\n\r\nexport const selectCardPageCount = (state: RootStateType): number => state.cards.pageCount\r\n\r\nexport const selectCardsTotalCount = (state: RootStateType): number => state.cards.cardsTotalCount\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Cards_container__uItu4\",\"main\":\"Cards_main__VBKQY\",\"addNewPackBtn\":\"Cards_addNewPackBtn__z20Jq\",\"backToPacksListBtn\":\"Cards_backToPacksListBtn__KBjla\",\"top\":\"Cards_top__UU542\",\"title\":\"Cards_title__A-NdW\",\"bottom\":\"Cards_bottom__7q8P2\",\"sort\":\"Cards_sort__BX8eB\"};","import React, { FC, useEffect } from 'react'\r\nimport { BackPage, Card, Pagination, Search, Sort } from 'components'\r\nimport { Path } from 'enums'\r\nimport { useSelector } from 'react-redux'\r\nimport { Navigate, useNavigate, useParams } from 'react-router-dom'\r\nimport { addCard, getCards } from 'store/asyncActions/cards'\r\nimport { useAppDispatch } from 'store/hooks'\r\nimport {\r\n\tselectCardPage,\r\n\tselectCardPageCount,\r\n\tselectCards,\r\n\tselectCardsTotalCount,\r\n\tselectIsAuth,\r\n\tselectIsDisabled,\r\n\tselectSearchCardValue,\r\n\tselectSortCards\r\n} from 'store/selectors'\r\nimport { ReturnComponentType } from 'types'\r\nimport { setCardPage, setCardPageCount, setSearchCardValue, setSortCards } from 'store/slices'\r\nimport style from './Cards.module.scss'\r\n\r\ntype CardsPropsType = {\r\n\r\n}\r\n\r\nexport const Cards: FC<CardsPropsType> = (): ReturnComponentType => {\r\n\r\n\tconst dispatch = useAppDispatch()\r\n\r\n\tconst { packId } = useParams()\r\n\tconst navigate = useNavigate()\r\n\r\n\tconst isAuth = useSelector(selectIsAuth)\r\n\tconst cards = useSelector(selectCards)\r\n\tconst searchCardValue = useSelector(selectSearchCardValue)\r\n\tconst sortCards = useSelector(selectSortCards)\r\n\tconst isDisabled = useSelector(selectIsDisabled)\r\n\tconst cardPage = useSelector(selectCardPage)\r\n\tconst cardPageCount = useSelector(selectCardPageCount)\r\n\tconst cardsTotalCount = useSelector(selectCardsTotalCount)\r\n\r\n\tconst sortCardsValues: string[] = ['Question', 'Answer', 'Last Updated', 'Grade']\r\n\tconst sortCardsByDescending: string[] = ['0question', '0answer', '0updated', '0grade ']\r\n\tconst sortCardsByAscending: string[] = ['1question', '1answer', '1updated', '1grade ']\r\n\r\n\tconst cardsRender = cards.map(({ _id, question, answer, updated, grade, user_id }) => {\r\n\t\treturn (\r\n\t\t\t<Card\r\n\t\t\t\tkey={_id}\r\n\t\t\t\tcardId={_id}\r\n\t\t\t\tquestion={question}\r\n\t\t\t\tanswer={answer}\r\n\t\t\t\tupdated={updated}\r\n\t\t\t\tgrade={grade}\r\n\t\t\t\tpackId={packId!}\r\n\t\t\t\tisDisabled={isDisabled}\r\n\t\t\t\tuser_id={user_id}\r\n\t\t\t/>\r\n\t\t)\r\n\t})\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isAuth) {\r\n\t\t\tdispatch(getCards(\r\n\t\t\t\t{\r\n\t\t\t\t\tpackId: packId as string,\r\n\t\t\t\t\tcardQuestion: searchCardValue,\r\n\t\t\t\t\tsortCards,\r\n\t\t\t\t\tpage: cardPage,\r\n\t\t\t\t\tpageCount: cardPageCount\r\n\t\t\t\t}))\r\n\t\t}\r\n\t}, [searchCardValue, sortCards, cardPage, cardPageCount])\r\n\r\n\tconst handleSetSearchCardValueChange = (value: string): void => {\r\n\t\tdispatch(setSearchCardValue(value))\r\n\t}\r\n\r\n\tconst handleResetSearchCardValueClick = (resetValue: string): void => {\r\n\t\tdispatch(setSearchCardValue(resetValue))\r\n\t}\r\n\r\n\tconst handleSortCardsByDescendingClick = (value: string): void => {\r\n\t\tdispatch(setSortCards(value))\r\n\t}\r\n\r\n\tconst handleSortCardsByAscendingClick = (value: string): void => {\r\n\t\tdispatch(setSortCards(value))\r\n\t}\r\n\r\n\tconst onAddPackClick = (): void => {\r\n\t\tdispatch(addCard({ packId: packId as string, answer: 'ttt', question: 'aaa' }))\r\n\t}\r\n\r\n\tconst handleBackPacksListClick = (): void => {\r\n\t\tnavigate(Path.PACKS)\r\n\t}\r\n\r\n\tconst handleSetCurrentPageClick = (page: number): void => {\r\n\t\tdispatch(setCardPage(page))\r\n\t}\r\n\r\n\tconst handleSetPageCountChange = (pageCount: number): void => {\r\n\t\tdispatch(setCardPageCount(pageCount))\r\n\t}\r\n\r\n\tif (!isAuth) {\r\n\t\treturn <Navigate to={Path.LOGIN} />\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={style.container}>\r\n\t\t\t<BackPage\r\n\t\t\t\ttitle={'Back to Packs List'}\r\n\t\t\t\tisDisabled={isDisabled}\r\n\t\t\t\tonBackPageClick={handleBackPacksListClick}\r\n\t\t\t/>\r\n\r\n\t\t\t<div className={style.top}>\r\n\t\t\t\t<h2 className={style.title}>Packs list</h2>\r\n\t\t\t</div>\r\n\t\t\t<div className={style.main}>\r\n\t\t\t\t<Search\r\n\t\t\t\t\tsearchValue={searchCardValue}\r\n\t\t\t\t\thandleSetSearchValueChange={handleSetSearchCardValueChange}\r\n\t\t\t\t\thandleResetSearchValueClick={handleResetSearchCardValueClick}\r\n\t\t\t\t/>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName={style.addNewPackBtn}\r\n\t\t\t\t\tonClick={onAddPackClick}\r\n\t\t\t\t\tdisabled={isDisabled}\r\n\t\t\t\t>\r\n\t\t\t\t\tAdd new card\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<div className={style.bottom}>\r\n\t\t\t\t<div className={style.sort}>\r\n\t\t\t\t\t<Sort\r\n\t\t\t\t\t\tsortValues={sortCardsValues}\r\n\t\t\t\t\t\tsortByDescending={sortCardsByDescending}\r\n\t\t\t\t\t\tsortByAscending={sortCardsByAscending}\r\n\t\t\t\t\t\tsortValue={sortCards}\r\n\t\t\t\t\t\tisDisabled={isDisabled}\r\n\t\t\t\t\t\thandleSortByDescendingClick={handleSortCardsByDescendingClick}\r\n\t\t\t\t\t\thandleSortByAscendingClick={handleSortCardsByAscendingClick}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{cardsRender}\r\n\t\t\t<Pagination\r\n\t\t\t\tcount={cardPageCount}\r\n\t\t\t\tcurrentPage={cardPage}\r\n\t\t\t\ttotalItemsCount={cardsTotalCount}\r\n\t\t\t\thandleSetCurrentPageClick={handleSetCurrentPageClick}\r\n\t\t\t\thandleSetPageCountChange={handleSetPageCountChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n"],"names":["selectCards","state","cards","selectSearchCardValue","searchCardValue","selectSortCards","sortCards","selectCardPage","page","selectCardPageCount","pageCount","selectCardsTotalCount","cardsTotalCount","Cards","dispatch","useAppDispatch","packId","useParams","navigate","useNavigate","isAuth","useSelector","selectIsAuth","isDisabled","selectIsDisabled","cardPage","cardPageCount","cardsRender","map","_id","question","answer","updated","grade","user_id","cardId","useEffect","getCards","cardQuestion","className","style","title","onBackPageClick","Path","searchValue","handleSetSearchValueChange","value","setSearchCardValue","handleResetSearchValueClick","resetValue","onClick","addCard","disabled","sortValues","sortByDescending","sortByAscending","sortValue","handleSortByDescendingClick","setSortCards","handleSortByAscendingClick","count","currentPage","totalItemsCount","handleSetCurrentPageClick","setCardPage","handleSetPageCountChange","setCardPageCount","to"],"sourceRoot":""}