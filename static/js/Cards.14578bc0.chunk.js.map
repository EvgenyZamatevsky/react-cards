{"version":3,"file":"static/js/Cards.14578bc0.chunk.js","mappings":"wPAGaA,EAAc,SAACC,GAAD,OAAsCA,EAAMC,MAAMA,OAEhEC,EAAqB,SAACF,GAAD,OAAkCA,EAAMC,MAAME,c,UCJhF,EAA4B,yBAA5B,EAA4D,oBAA5D,EAAgG,6BAAhG,EAAkJ,kCAAlJ,EAA0L,mBAA1L,EAAqN,qBAArN,EAAmP,sB,mBCgBtOC,EAA4B,WAExC,IAAMC,GAAWC,EAAAA,EAAAA,KAETC,GAAWC,EAAAA,EAAAA,MAAXD,OAEFE,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBV,GAAQS,EAAAA,EAAAA,IAAYX,GACpBI,GAAeO,EAAAA,EAAAA,IAAYR,GAE3BU,EAAcX,EAAMY,KAAI,YAAgD,IAA7CC,EAA4C,EAA5CA,IAAKC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAChE,OAAO,SAAC,KAAD,CAAgBH,SAAUA,EAAUC,OAAQA,EAAQC,QAASA,EAASC,MAAOA,GAAlEJ,OAGnBK,EAAAA,EAAAA,YAAU,WACLV,GACHJ,GAASe,EAAAA,EAAAA,GAAS,CAAEC,OAAQd,EAAkBJ,aAAAA,OAE7C,CAACA,IAcJ,OAAKM,GAKJ,iBAAKa,UAAWC,EAAhB,WACC,UAAC,KAAD,CAAMC,GAAIC,EAAAA,EAAAA,MAAYH,UAAWC,EAA0BG,QAVnC,WACzBrB,GAASsB,EAAAA,EAAAA,QASR,WACC,gBAAKC,IAAKC,EAAAA,EAAOC,IAAI,WACrB,oDAGD,gBAAKR,UAAWC,EAAhB,UACC,eAAID,UAAWC,EAAf,2BAED,iBAAKD,UAAWC,EAAhB,WACC,SAAC,KAAD,CACCQ,YAAa5B,EACb6B,2BA7BgC,SAACC,GACpC5B,GAAS6B,EAAAA,EAAAA,IAAgBD,KA6BtBE,4BA1BiC,SAACC,GACrC/B,GAAS6B,EAAAA,EAAAA,IAAgBE,QA2BvB,mBAAQd,UAAWC,EAAqBG,QAAS,aAAjD,8BAED,gBAAKJ,UAAWC,EAAhB,UACC,SAAC,KAAD,MAEAX,MAxBK,SAAC,KAAD,CAAUY,GAAIC,EAAAA,EAAAA","sources":["store/selectors/cards.ts","webpack://react-cards/./src/pages/cards/Cards.module.scss?249a","pages/cards/Cards.tsx"],"sourcesContent":["import { CardType } from 'api/cards/types'\r\nimport { RootStateType } from 'store'\r\n\r\nexport const selectCards = (state: RootStateType): CardType[] => state.cards.cards\r\n\r\nexport const selectCardQuestion = (state: RootStateType): string => state.cards.cardQuestion\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Cards_container__uItu4\",\"main\":\"Cards_main__VBKQY\",\"addNewPackBtn\":\"Cards_addNewPackBtn__z20Jq\",\"backToPacksListBtn\":\"Cards_backToPacksListBtn__KBjla\",\"top\":\"Cards_top__UU542\",\"title\":\"Cards_title__A-NdW\",\"bottom\":\"Cards_bottom__7q8P2\"};","import { Card, Search, Sort } from 'components'\r\nimport { Path } from 'enums'\r\nimport React, { FC, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link, Navigate, useParams } from 'react-router-dom'\r\nimport { getCards } from 'store/asyncActions/cards'\r\nimport { useAppDispatch } from 'store/hooks'\r\nimport { selectCardQuestion, selectCards, selectIsAuth } from 'store/selectors'\r\nimport { ReturnComponentType } from 'types'\r\nimport arrow from 'assets/icons/arrow.svg'\r\nimport style from './Cards.module.scss'\r\nimport { resetCards, setCardQuestion } from 'store/slices'\r\n\r\ntype CardsPropsType = {\r\n\r\n}\r\n\r\nexport const Cards: FC<CardsPropsType> = (): ReturnComponentType => {\r\n\r\n\tconst dispatch = useAppDispatch()\r\n\r\n\tconst { cardId } = useParams()\r\n\r\n\tconst isAuth = useSelector(selectIsAuth)\r\n\tconst cards = useSelector(selectCards)\r\n\tconst cardQuestion = useSelector(selectCardQuestion)\r\n\r\n\tconst cardsRender = cards.map(({ _id, question, answer, updated, grade }) => {\r\n\t\treturn <Card key={_id} question={question} answer={answer} updated={updated} grade={grade} />\r\n\t})\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isAuth) {\r\n\t\t\tdispatch(getCards({ packId: cardId as string, cardQuestion }))\r\n\t\t}\r\n\t}, [cardQuestion])\r\n\r\n\tconst handleSetCardQuestionChange = (value: string): void => {\r\n\t\tdispatch(setCardQuestion(value))\r\n\t}\r\n\r\n\tconst handleResetCardQuestionClick = (resetValue: string): void => {\r\n\t\tdispatch(setCardQuestion(resetValue))\r\n\t}\r\n\r\n\tconst onResetCardsClick = (): void => {\r\n\t\tdispatch(resetCards())\r\n\t}\r\n\r\n\tif (!isAuth) {\r\n\t\treturn <Navigate to={Path.LOGIN} />\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={style.container}>\r\n\t\t\t<Link to={Path.PACKS} className={style.backToPacksListBtn} onClick={onResetCardsClick}>\r\n\t\t\t\t<img src={arrow} alt='arrow' />\r\n\t\t\t\t<div>Back to Packs List</div>\r\n\t\t\t</Link>\r\n\r\n\t\t\t<div className={style.top}>\r\n\t\t\t\t<h2 className={style.title}>Packs list</h2>\r\n\t\t\t</div>\r\n\t\t\t<div className={style.main}>\r\n\t\t\t\t<Search\r\n\t\t\t\t\tsearchValue={cardQuestion}\r\n\t\t\t\t\thandleSetSearchValueChange={handleSetCardQuestionChange}\r\n\t\t\t\t\thandleResetSearchValueClick={handleResetCardQuestionClick}\r\n\t\t\t\t/>\r\n\t\t\t\t<button className={style.addNewPackBtn} onClick={() => { }}>Add new card</button>\r\n\t\t\t</div>\r\n\t\t\t<div className={style.bottom}>\r\n\t\t\t\t<Sort />\r\n\t\t\t</div>\r\n\t\t\t{cardsRender}\r\n\t\t</div>\r\n\t)\r\n}\r\n"],"names":["selectCards","state","cards","selectCardQuestion","cardQuestion","Cards","dispatch","useAppDispatch","cardId","useParams","isAuth","useSelector","selectIsAuth","cardsRender","map","_id","question","answer","updated","grade","useEffect","getCards","packId","className","style","to","Path","onClick","resetCards","src","arrow","alt","searchValue","handleSetSearchValueChange","value","setCardQuestion","handleResetSearchValueClick","resetValue"],"sourceRoot":""}